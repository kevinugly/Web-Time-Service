x canary test

x get_list_of_times_for_locations for an empty list of locations returns an empty list.
x get_list_of_times_for_locations for a list with one location returns time for that location.

x get_list_of_times_for_locations for a list with two locations returns time for two locations.
x get_list_of_times_for_locations for a list with three locations returns time for three locations.
x get_list_of_times_for_locations for a list with three locations returns time for two locations and an error message when the request for the second location fails with an "invalid location" exception.
x get_list_of_times_for_locations for a list with three locations returns time for two locations and an error message when the request for the third location fails with a "network error" exception.

x Functions to talk to the real service
x get_raw_response takes a location and returns response from the URL where the response contains "passes", "latitude", and "longitude"
x parse_json for a sample data returns proper time extracted from the sample as string
x parse_json for another sample data returns proper time extracted from that sample as string
x get_flyover_time takes a location and calls get_raw_response and passes the response to parse_json and returns response from parse_json

x get_flyover_time throws the exception thrown by get_raw_response
x get_flyover_time throws the exception thrown by parse_json

x getRawResponseOfAstros returns response from the URL where the response contains "number" and "people"
x getNumberOfAstronauts calls getRawResponseOfAstro and returns the number of people currently in space as an int
x getAstronautNames takes in the number of astronauts and calls getRawResponseOfAstros to receive response and put names into list then returns the list

x Let's design a ui (not a GUI) program that will read a list of lat and lon from a file and display the relevant information. Let's create a run task to run the UI easily.